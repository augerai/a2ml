disjunction:
    | conjunction ('or' conjunction )+
    | conjunction

conjunction:
    | inversion ('and' inversion )+
    | inversion

inversion:
    | 'not' inversion
    | comparison

comparison:
    | bitwise_or compare_op_bitwise_or_pair+
    | bitwise_or

compare_op_bitwise_or_pair:
    | eq_bitwise_or
    | noteq_bitwise_or
    | lte_bitwise_or
    | lt_bitwise_or
    | gte_bitwise_or
    | gt_bitwise_or
    | notin_bitwise_or
    | in_bitwise_or

eq_bitwise_or: '==' bitwise_or

noteq_bitwise_or:
    | ('!=' ) bitwise_or

lte_bitwise_or: '<=' bitwise_or
lt_bitwise_or: '<' bitwise_or
gte_bitwise_or: '>=' bitwise_or
gt_bitwise_or: '>' bitwise_or
notin_bitwise_or: 'not' 'in' bitwise_or
in_bitwise_or: 'in' bitwise_or

bitwise_or:
    | bitwise_or '|' bitwise_xor
    | bitwise_xor

bitwise_xor:
    | bitwise_xor '^' bitwise_and
    | bitwise_and

bitwise_and:
    | bitwise_and '&' shift_expr
    | shift_expr

shift_expr:
    | shift_expr '<<' sum
    | shift_expr '>>' sum
    | sum

sum:
    | sum '+' term
    | sum '-' term
    | term

term:
    | term '*' factor
    | term '/' factor
    | term '//' factor
    | term '%' factor
    | factor

factor:
    | '+' factor
    | '-' factor
    | '~' factor
    | power

power:
    | primary '**' factor
    | primary

expression:
    | disjunction

primary:
    | '(' expression ')'
    | atom
    | top_expression

atom:
    | NAME
    | func_call_statement
    | 'True'
    | 'False'
    | 'None'
    | STRING
    | NUMBER

func_call_statement:
    | NAME '(' (expression (',' expression)*)? ')'

top_expression:
    | top_expression_type' NUMBER 'by' expression ['per' expression] ['where' expression] ['from' '(' top_expression ')']

top_expression_type:
    | 'top'
    | 'bottom'
